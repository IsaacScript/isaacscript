// This is a tsconfig.json intended to be used as a base for all TypeScript projects. It only
// contains options that have to do with code checking strictness and omits all options having to do
// with environment or transpilation.
{
  // We extend the strictest base config:
  // https://github.com/tsconfig/bases/blob/main/bases/strictest.json
  // Note the "esModuleInterop" and "skipLibCheck" options from `strictest` do not have to do with
  // strictness, but we leave these values unchanged:
  // https://github.com/tsconfig/bases/issues/156
  "extends": "@tsconfig/strictest/tsconfig.json",

  // https://www.typescriptlang.org/docs/handbook/compiler-options.html
  "compilerOptions": {
    // The "strictest" config has the "exactOptionalPropertyTypes" flag set to true. However, this
    // is only needed in rare cases, like when using the `in` operator. Furthermore, it can cause
    // spurious errors when trying to clear an attribute of an object.
    "exactOptionalPropertyTypes": false,

    // The "strictest" config has the "noFallthroughCasesInSwitch" flag set to true. However, we
    // prefer the "no-fallthrough" ESLint rule instead, as this does not have to do with types.
    "noFallthroughCasesInSwitch": false,

    // The "strictest" config has the "noUnusedLocals" and the "noUnusedParameters" flags set to
    // true. However, we prefer the "@typescript-eslint/no-unused-vars" ESLint rule instead, since
    // unused local variables can be useful while debugging. Furthermore, the ESLint rule has the
    // ability to ignore certain specific variable prefixes, while the TypeScript version does not.
    "noUnusedLocals": false,
    "noUnusedParameters": false,

    // The "strictest" config has the "checkJs" flag set to true. However, this can cause false
    // positives with JavaScript config files located in the root of the project directory (like the
    // ESLint config file). For pure TypeScript projects, having this set to true is unnecessary.
    // TODO: remove this block
    "checkJs": false,
  },
}
