import {
  $,
  $op,
  $s,
  buildScript,
  buildTypeScript,
  getFileNamesInDirectory,
  mkdir,
  mv,
  readFile,
  writeFile,
} from "isaacscript-common-node";
import path from "node:path";

const INTERFACE_FILE_NAMES = ["CustomStageTSConfig", "JSONRoomsFile"] as const;
const COPIED_FILE_HEADER =
  '// THIS FILE IS AUTOMATICALLY GENERATED BY THE "build.ts" SCRIPT. DO NOT EDIT THIS FILE!\n\n';

const TSCONFIG_SCHEMA_PATH = "schemas/tsconfig-isaacscript-section-schema.json";
const ISAACSCRIPT_SCHEMA_PATH = "schemas/isaacscript-schema.json";

await buildScript(async ({ packageRoot }) => {
  copyIsaacScriptCommonInterfaces(packageRoot);

  const promises: Array<Promise<unknown>> = [];

  const pluginsDirPath = path.join(packageRoot, "plugins");
  const $$ = $op({ cwd: pluginsDirPath });

  promises.push(
    buildTypeScript(packageRoot),

    // Generate the JSON schema for the special "isaacscript" section in "tsconfig.json".
    $`ts-json-schema-generator --path src/interfaces/IsaacScriptTSConfig.ts --tsconfig tsconfig.json --out ${TSCONFIG_SCHEMA_PATH}`,

    // Generate the JSON schema for the "isaacscript.json" file. (The `ts-json-schema-generator`
    // tool is noisy.)
    $`ts-json-schema-generator --path src/classes/Config.ts --tsconfig tsconfig.json --out ${ISAACSCRIPT_SCHEMA_PATH}`,

    // Compile the plugins.
    $$`tsc`,
  );

  await Promise.all(promises);

  $s`prettier ${TSCONFIG_SCHEMA_PATH} ${ISAACSCRIPT_SCHEMA_PATH} --write --log-level=warn`;
  renamePluginJSToCJS(pluginsDirPath);
});

/**
 * First, copy some interfaces from "isaacscript-common". Normally, we would reference them
 * directly, but we cannot directly from "isaacscript-common" in this package until TSTL supports
 * ".ts" file extensions:
 * https://github.com/TypeScriptToLua/TypeScriptToLua/issues/1514
 *
 * Additionally, we do not want to create a "isaacscript-common-types" package because then it
 * becomes harder to get the types documented on the Docusaurus website. Furthermore, a hypothetical
 * "isaacscript-common-types" package would have to contain a copied `Immutable` type, since
 * "isaacscript-common-types" would not be able to import from either "isaacscript-common" or
 * "isaacscript-common-ts".
 */
function copyIsaacScriptCommonInterfaces(packageRoot: string) {
  const sourceDirectoryPath = path.join(
    packageRoot,
    "..",
    "isaacscript-common",
    "src",
    "interfaces",
  );
  const destinationDirectoryPath = path.join(
    packageRoot,
    "src",
    "interfaces",
    "copied",
  );
  mkdir(destinationDirectoryPath);

  for (const fileName of INTERFACE_FILE_NAMES) {
    const fullFileName = `${fileName}.ts`;
    const sourcePath = path.join(sourceDirectoryPath, fullFileName);
    let fileContents = readFile(sourcePath);
    fileContents = COPIED_FILE_HEADER + fileContents;
    fileContents = fileContents.replaceAll(
      '"../types/Immutable"',
      '"isaacscript-common-ts"',
    );
    const destinationPath = path.join(destinationDirectoryPath, fullFileName);
    writeFile(destinationPath, fileContents);
  }
}

function renamePluginJSToCJS(pluginsDirPath: string) {
  const fileNames = getFileNamesInDirectory(pluginsDirPath);
  for (const fileName of fileNames) {
    if (fileName.endsWith(".js")) {
      const oldFilePath = path.join(pluginsDirPath, fileName);
      const newFileName = fileName.replace(".js", ".cjs");
      const newFilePath = path.join(pluginsDirPath, newFileName);
      mv(oldFilePath, newFilePath);
    }
  }
}
