// This generates the files in the "src/configs" directory.

import type { TSESLint } from "@typescript-eslint/utils";
import fs from "node:fs";
import path from "node:path";
import { PACKAGE_ROOT, PLUGIN_NAME } from "./constants.mjs";
import type { RuleDefinition } from "./utils.mjs";
import {
  formatWithPrettier,
  getAutoGeneratedComment,
  getRuleEntries,
  getRuleNameWithPluginNamePrefix,
  isRecommendedRule,
} from "./utils.mjs";

type LinterConfigRules = Record<
  string,
  TSESLint.Linter.RuleLevel | TSESLint.Linter.RuleLevelAndOptions
>;

interface LinterConfig extends TSESLint.Linter.Config {
  extends?: string | string[];
  plugins?: string[];
}

export const CONFIGS_DIRECTORY_PATH = path.join(PACKAGE_ROOT, "src", "configs");

// eslint-disable-next-line isaacscript/require-capital-const-assertions
const BASE_CONFIG: LinterConfig = {
  plugins: [PLUGIN_NAME],
  rules: {
    // The ESLint "eqeqeq" rule will conflict with the "isaacscript/eqeqeq-fix" rule.
    eqeqeq: "off",

    // The ESLint "no-template-curly-in-string" rule will conflict with the
    // "isaacscript/no-template-curly-in-string-fix" rule.
    "no-template-curly-in-string": "off",
  },
};

export async function generateConfigs(): Promise<void> {
  await recommended();
}

async function recommended() {
  const ruleEntries = await getRuleEntries();
  const recommendedRules = ruleEntries
    .filter((entry) => isRecommendedRule(entry[1]))
    // eslint-disable-next-line unicorn/no-array-reduce
    .reduce<LinterConfigRules>((config, entry) => reducer(config, entry), {});
  const recommendedConfig: LinterConfig = {
    ...BASE_CONFIG,
    rules: {
      ...BASE_CONFIG.rules,
      ...recommendedRules,
    },
  };
  await writeConfig("recommended", recommendedConfig);
}

async function writeConfig(name: string, config: LinterConfig) {
  const comment = getAutoGeneratedComment();
  const code = `export const ${name} = ${JSON.stringify(config)};`;
  const combined = comment + code;
  const content = await formatWithPrettier(combined, "typescript");

  const fileName = `${name}.ts`;
  const filePath = path.join(CONFIGS_DIRECTORY_PATH, fileName);
  fs.writeFileSync(filePath, content);
}

/** Reduces records to key/value pairs. */
function reducer(
  config: LinterConfigRules,
  entry: [string, RuleDefinition],
): LinterConfigRules {
  const [ruleName] = entry;
  const fullRuleName = getRuleNameWithPluginNamePrefix(ruleName);
  config[fullRuleName] = "error";

  return config;
}
